MSL 最大段的生命周期 30s-1min 2MSL就是2分钟左右

1.为了保证tcp协议的全双工连接能够可靠关闭
如果被动关闭方没有收到ack 就会请求对方重传，如果可以等待MSL就可以重传 如果不等待就无法重传，就会导致被动关闭方一直处于LAST-ACK的状态无法进入close状态 资源无法得到释放
2.保证这次连接重复的数据段从网络中消失
比如客户端A端口会话已经结束，这时候客户端又重新建立起会话还是连接这个服务器，并且重新用这个A端口，恰巧finish包发生了一次重传，就会对新会话产生影响，如果等待2MSL就可以保证重传的数据包一定不会再出现，也就是说如果新建立会话会有一个稳定的状态

为啥会出现大量close_wait?

1.close_wait 一般会出现在被动关闭方
大部分原因是因为并发请求太多导致，在大量并发请求下，服务端对应间歇的处理时间没有跟上并发就会出现close_wait
2.被动关闭方未及时释放端口资源导致（代码里面调用conn.close(),如果不关闭服务端就会显示close_wait  客户端就会有个finish_wait状态）

为什么需要流量控制
由于通讯双方，网速不同，通讯任一方发送过快都会导致对方消息处理不过来，所以就需要把数据放到缓冲区中，
如果缓冲区满了接收方只能把数据包丢弃，因此需要控制发送速率。
缓冲区剩余大小成为接收窗口 用win表示，如果win==0则停止发送

为什么需要拥塞控制
拥塞控制是调节网络的负载
接收方网络资源繁忙，因此未能及时响应ACK导致发送方重传了大量数据，会导致网络更加拥堵
拥塞控制是动态调整win窗口大小，不只是依赖缓冲区大小来确定窗口大小

拥塞控制分为2部分 
第一部分为【慢开始和拥塞避免】
慢启动就是tcp网络连接之后一点一点的提速试探网络承受能力，以免直接扰乱网络通讯秩序
一开始拥塞窗口cwnd 是1 每过一个往返的一个时间（RTT）就翻倍x2，他是有一个阈值，超过这个阈值就进入拥塞避免的阶段
拥塞避免阶段每个RTT是通过+1的形式递增，再往后如果遇到网络拥塞，他的拥塞窗口会直接变为1然后拥塞避免阈值会降为原来一半
然后再进入慢启动，再进入拥塞避免阶段
这里面涉及到的问题因为遇到网络拥塞导致拥塞窗口直接变为1，会对传输造成很大的影响，所以后来对算法进行了优化

第二部分是【快速重传和快速恢复】（优化）
收到三次重复ACK的时候会进行快速重传
重传逻辑是将原来的拥塞窗口降为原来的一半，把拥塞避免的阈值也降为原来的一半，随后进入一个快速恢复的阶段
快速恢复阶段拥塞窗口是通过+1的形式递增，直到把所有包重新发送完毕就推出快速恢复阶段进入拥塞避免阶段，就进入了正常的请求流程。

什么是粘包？2次tcp请求数据都合并到了一个tcp报文当中。
什么是拆包？就是一个请求被拆成2部分发出去
为什么会出现粘包拆包？
1.应用程序写入的数据大于套接字缓冲区大小，这将会发生拆包。
2.进行MSS（最大报文长度）大小的TCP分段，当TCP报文长度-TCP头部长度大于MSS的时候的时候将发生拆包。
3.应用程序写入数据小于套接字缓冲区大小，网卡将应用多次写入的数据发送到网络上，这将会发生粘包。
4.接收方法不及时读取套接字缓冲区数据，也会发生粘包的情况。

如何解决上述问题获取完整报文
1.第一种使用带消息头的协议，头部写入包长度，然后再读取包内容
2.第二种设置定长消息，每次读取定长内容，长度不够时在空位补充固定字符
3.第三种是设置消息边界，服务端从网络流中按照小溪边界分离出消息内容一般使用\n
4.使用序列化格式 如json protobuf





