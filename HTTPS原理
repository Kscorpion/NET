HTTPS 原理解析：

	场景1.如果以明文进行传输,那么明文就会跑在网络上,在这个过程中如果有黑客进来,传输过程中的数据将会完全暴露给黑客。
  
	场景2.使用对称加密算法 ：
		1)f1(key,data)=x 经过加密算法得到加密后的数据得到x,。
		2)f2(key,x) = data 经过对应的解密算法进行解密,获取原数据。
		3)服务端和客户端每次都是进行先加密,再传输,再解密,处理后再加密发送的过程。
		4)由于服务端不可能知道有多少个客户端,也不可能把全部key都保存到服务端,所以key只能有一个。
		5)如果黑客在中间获取到了key也可以进行加密解密,那么加密操作将是无效的。
		6)缺点就是key只有一个
    
	场景3.非对称加密：（公钥pk,私钥sk)
		1)首先客户端会去客户端进行请求获取公钥,这里将会使用专属的443端口,拿到公钥之后进行如下处理
		2)f(pk,data) = Y 客户端通过使用公钥进行加密传给服务端。
		3)f(sk,data) = Y 服务端通过使用私钥进行解密进行处理。
		4)同样如果服务端使用私钥进行加密,发送给客户端后客户端也可以通过公钥进行解密。
		5)这个过程看似完美,因为私钥只有服务端有其他客户端都没有,所以只有服务端可以进行解密,黑客
看似对数据好无办法,但是这个过程有个致命缺点,就是我们的服务端如何向客户端发送数据？？？
因为黑客也是可以拿到公钥去解密服务端发来的数据的,所以非对称加密也不可取。

	场景4.先利用非对称加密的方式来达成服务端与客户端的协商,协商出一个临时制定的key,之后再使用对称加密进行数据的交互,这样

就可以保证key的唯一性,每个客户端将有不同的key
		1)第一步还是会去所要公钥,客户端拿到公钥,使用公钥对一个【随机数】进行加密,服务端对拿到的数据进行解密,解密之后的【随机数】就作为服务端与客户端进行对称加密的key了。
		2)服务端会通知一声客户端OK,这样就表示协商完成
			1]例访问比如访问一个域名时,请求中还包括支持SSL的版本以及非对称加密算法和【随机数1】
			2]客户端拿到后就知道使用的是什么版本的SSL,使用了非对称加密算法是哪个,就定下来使用的SSL版本和使用的对称加密算法,还有使用的【随机数2】,最后再把证书放到里面。
			3]客户端进行认证证书。
			4]如果认证成功了,客户端会向服务端发送数据【随机数3】以及hash算法会将[1][2]中的数据全部加入进来进行hash 得到hash值 X,将这个内容上传至服务端。
			5]服务端收到这部分内容会判断X是否等于hash([1][2]),如果是的话则表示身份没有问题,之后服务端通过三个【随机数】生成一个key。
			6]服务端通过hash([1][2][4])将[1][2][4]中的数据全部进行hash算法,将hash后的值ZZ返回给客户端。
			7]客户端也参与了[1][2][4]的交互也有交互数据,因此也同样使用hash([1][2][4])判定结果是不是等于ZZ,如果等于则将三个随机数通过转换策略生成一个key这个key和[5]中的key应该是一样的
		3)此时黑客在中间进行截取,但是却并不知道这个协商的key是什么,所以也无法进行破解。
		4)但其实黑客还是有办法破解的,当客户端去请求公钥的时候,黑客进行拦截,黑客本身也有公钥和私钥,黑客将自身的公钥传递给客户端,黑客假装自己就是客户端去像服务端获取公钥自己留着,
    客户端通过黑客的公钥进行加密发送给了黑客黑客使用私钥进行解密,那么就可以拿到协商的key了,黑客通过使用客户端的key,再使用自己的公钥进行加密向服务端发送请求,服务端接收到数据进行私钥解密再加密,
    又会发送给黑客,如此循环,黑客就可以获取到全部的信息了,这就是中间人攻击。
	
	场景5.引入CA证书授权,只有被权威机构认证的公钥才是好公钥,其他都是黑客
		1)首先服务端还是有PK和SK ,CA机构也有PK和SK,这里称为CPK和CSK ,f(CPK,PK)加密之后得到一个证书,我们称为license,客户端不请求之前的PK了,而是直接去请求license。
		2)那么客户端获取之后如何进行解密呢？去CA机构去获取CPK？但是这样又可能被中间人截获,所以我们干脆不去拿了,直接写死在了操作系统 o_0,直接在操作系统端对license进行解密就可以拿到PK了
		3)获取之后就开始重复协商之后进行交互的过程
		4)此时如果中间人去获取证书,那么这个黑客去解密再加密之后传给客户端,客户端就会发现这个证书是不安全的（很多证书需要付费),网页就会弹出证书不安全,这样用户就不会进行访问了。
		5)如果黑客在证书传递之后进行介入,那么此时客户端是同过PK进行加密的,而黑客没有对应的SK所以也是对密文无能为力的。
		
	总结：HTTPS使用了对称加密+非对称加密+hash算法+CA认证 4种技术。
	
	思考：第二个阶段使用非对称加密也是可以的,为什么没有使用非对称加密？？？
	
	  答：理论上是可以的,但是因为非对称加密解密计算开销远远大于对称加密,这是最重要的原因,尤其是服务端如果大量消耗性能会使服务质量下降,而且服务端获取每个客户端的公钥也是很大的开销。
		
		
		
	
	
